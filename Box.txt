import java.lang.Math;

class Box{
    int width;
    int height;
    int currentAngle;
    Coordinates NW = new Coordinates();
    Coordinates NE = new Coordinates();
    Coordinates SW =  new Coordinates();
    Coordinates SE = new Coordinates();
	ArrayList<Coordinates> points = new ArrayList<Coordinates>();
    
    Box(int w, int h){
		if(w > h){
			System.out.println("Width cannot be greater than height. Pls try again. Exiting...");
			return;
		}
        width = w;
    	height = h;
    }
	
	public int getCurrentAngle(){
		return currentAngle;
    }
	
    public void setCurrentAngle(int angle){
            currentAngle = angle;
    }
		
	public void initBox(int startx, int starty){
		SW.setCoordinates(startx, starty);
		
		int currentAngle = this.getCurrentAngle();
		int oppositeAngle;
		int adjustedCurrentAngle;

		//This one works too
		if(currentAngle > 0 && currentAngle < 90){
			oppositeAngle = 90-currentAngle;
			adjustedCurrentAngle = currentAngle;
			
			if(adjustedCurrentAngle < 45){
				int yOffsetWidthWise = (int) (0.5+Math.abs(width/Math.tan(Math.toRadians(oppositeAngle))));
				int xOffsetHeightWise = (int) (0.5+Math.abs(Math.tan(Math.toRadians(adjustedCurrentAngle)))*height);

				NW.setCoordinates(SW.getXCoordinate()+xOffsetHeightWise, SW.getYCoordinate()+height);
				SE.setCoordinates(SW.getXCoordinate()+width, SW.getYCoordinate()-yOffsetWidthWise);
				NE.setCoordinates(SE.getXCoordinate()+xOffsetHeightWise, SE.getYCoordinate()+height);
			}
			else if(adjustedCurrentAngle > 45){
				NW.setCoordinates(SW.getXCoordinate()+height, SW.getYCoordinate()+height);
				SE.setCoordinates(SW.getXCoordinate()-width, SW.getYCoordinate()+width);
				NE.setCoordinates(SE.getXCoordinate()+height, SE.getYCoordinate()+height);
			}
			//Angle is exactly 45
			else{
				NW.setCoordinates(SW.getXCoordinate()+height, SW.getYCoordinate()+height);
				SE.setCoordinates(SW.getXCoordinate()-width, SW.getYCoordinate()+width);
				NE.setCoordinates(SE.getXCoordinate()+height, SE.getYCoordinate()+height);
			}
		}
		//This one doesn't work still; changed the one under > 45 to be width/<everything else>; changed the one under < 45 to be width*<ee>
		else if(currentAngle > 90 && currentAngle < 180){
			oppositeAngle = 90-currentAngle;
			adjustedCurrentAngle = currentAngle-90;
			
			if(adjustedCurrentAngle < 45){
				int yOffsetWidthWise = (int) (0.5+Math.abs(width*Math.tan(Math.toRadians(oppositeAngle))));
				int xOffsetHeightWise = (int) (0.5+Math.abs(height*Math.tan(Math.toRadians(adjustedCurrentAngle))));

				NW.setCoordinates(SW.getXCoordinate()+xOffsetHeightWise, SW.getYCoordinate()-height);
				SE.setCoordinates(SW.getXCoordinate()-width, SW.getYCoordinate()-yOffsetWidthWise);
				NE.setCoordinates(SE.getXCoordinate()+xOffsetHeightWise, SE.getYCoordinate()-height);
			}
			else if(adjustedCurrentAngle > 45){
				int xOffsetWidthWise = (int) (0.5+Math.abs(width/Math.tan(Math.toRadians(oppositeAngle))));
				int yOffsetHeightWise = (int) (0.5+Math.abs(height/Math.tan(Math.toRadians(adjustedCurrentAngle))));

				NW.setCoordinates(SW.getXCoordinate()+height, SW.getYCoordinate()-yOffsetHeightWise);
				SE.setCoordinates(SW.getXCoordinate()-xOffsetWidthWise, SW.getYCoordinate()-width);
				NE.setCoordinates(SE.getXCoordinate()+height, SE.getYCoordinate()-yOffsetHeightWise);
			}
			//Angle is exactly 45
			else{
				NW.setCoordinates(1,1);
				SE.setCoordinates(1,1);
				NE.setCoordinates(1,1);
			}
		}
		else if(currentAngle > 180 && currentAngle < 270){
			oppositeAngle =  90-currentAngle;
			adjustedCurrentAngle = currentAngle-180;
			
			if(adjustedCurrentAngle < 45){
				int yOffsetWidthWise = (int) (0.5+Math.abs(width/Math.tan(Math.toRadians(oppositeAngle))));
				int xOffsetHeightWise = (int) (0.5+Math.abs(Math.tan(Math.toRadians(adjustedCurrentAngle)))*height);
				System.out.println("Angle is between 180 and 270, and the offsets, which fucking should be 0 are: xOffsetWid");

				NW.setCoordinates(SW.getXCoordinate()-xOffsetHeightWise, SW.getYCoordinate()-height);
				SE.setCoordinates(SW.getXCoordinate()-width, SW.getYCoordinate()+yOffsetWidthWise);
				NE.setCoordinates(SE.getXCoordinate()-xOffsetHeightWise, SE.getYCoordinate()-height);
				return;
			}
			else if(adjustedCurrentAngle > 45){
				int xOffsetWidthWise = (int) (0.5+Math.abs(Math.tan(Math.toRadians(oppositeAngle)))*width);
				int yOffsetHeightWise = (int) (0.5+Math.abs(height/Math.tan(Math.toRadians(adjustedCurrentAngle))));

				NW.setCoordinates(SW.getXCoordinate()-height, SW.getYCoordinate()-yOffsetHeightWise);
				SE.setCoordinates(SW.getXCoordinate()-xOffsetWidthWise, SW.getYCoordinate()+width);
				NE.setCoordinates(SE.getXCoordinate()-height, SE.getYCoordinate()-yOffsetHeightWise);
				return;
			}
			//Angle is exactly 45
			else{
				int halfWidth = (int) 0.5*(this.width);
				int halfHeight = (int) 0.5*(this.height);
				NW.setCoordinates(1,1);
				SE.setCoordinates(1,1);
				NE.setCoordinates(1,1);
				return;
			}
		}
		else if(currentAngle > 270 && currentAngle < 360){
			oppositeAngle =  90-currentAngle;
			adjustedCurrentAngle = currentAngle-270;
			
			if(adjustedCurrentAngle < 45){
				int xOffsetWidthWise = (int) (0.5+Math.abs(width*Math.tan(Math.toRadians(oppositeAngle))));
				int yOffsetHeightWise = (int) (0.5+Math.abs(height*Math.tan(Math.toRadians(adjustedCurrentAngle))));

				NW.setCoordinates(SW.getXCoordinate()-height, SW.getYCoordinate()+yOffsetHeightWise);
				SE.setCoordinates(SW.getXCoordinate()+xOffsetWidthWise, SW.getYCoordinate()+width);
				NE.setCoordinates(SE.getXCoordinate()-height, SE.getYCoordinate()+yOffsetHeightWise);
			}
			else if(adjustedCurrentAngle > 45){
				int yOffsetWidthWise = (int) (0.5+Math.abs(width/Math.tan(Math.toRadians(oppositeAngle))));
				int xOffsetHeightWise = (int) (0.5+Math.abs(height/Math.tan(Math.toRadians(adjustedCurrentAngle))));
				System.out.println("yOffWW: " + yOffsetWidthWise + "    xOffHW: " + xOffsetHeightWise);

				NW.setCoordinates(SW.getXCoordinate()-xOffsetHeightWise, SW.getYCoordinate()+height);
				SE.setCoordinates(SW.getXCoordinate()+width, SW.getYCoordinate()+yOffsetWidthWise);
				NE.setCoordinates(SE.getXCoordinate()-xOffsetHeightWise, SE.getYCoordinate()+height);
			}
			//Angle is exactly 45
			else{
				NW.setCoordinates(1,1);
				SE.setCoordinates(1,1);
				NE.setCoordinates(1,1);
			}
		}
		else if(currentAngle == 0){
			NW.setCoordinates(SW.getXCoordinate(), SW.getYCoordinate()+height);
			SE.setCoordinates(SW.getXCoordinate()+width, SW.getYCoordinate());
			NE.setCoordinates(SE.getXCoordinate(), SE.getYCoordinate()+height);
		}
		else if(currentAngle == 90){
			NW.setCoordinates(SW.getXCoordinate()+height, SW.getYCoordinate());
			SE.setCoordinates(SW.getXCoordinate(), SW.getYCoordinate()-width);
			NE.setCoordinates(SE.getXCoordinate()+height, SE.getYCoordinate());	
		}
		else if(currentAngle == 180){
			NW.setCoordinates(SW.getXCoordinate(), SW.getYCoordinate()-height);
			SE.setCoordinates(SW.getXCoordinate()-width, SW.getYCoordinate());
			NE.setCoordinates(SE.getXCoordinate(), SE.getYCoordinate()-height);
		}
		//Angle is 360 degrees
		else{
			NW.setCoordinates(SW.getXCoordinate(), SW.getYCoordinate()+height);
			SE.setCoordinates(SW.getXCoordinate()-width, SW.getYCoordinate());
			NE.setCoordinates(SE.getXCoordinate(), SE.getYCoordinate()+height);
		}
	}
	
	public void printCornerCoordinates(){
		System.out.println("(" + SW.getXCoordinate() + ", " + SW.getYCoordinate() + ")" +
		"(" + SE.getXCoordinate() + ", " + SE.getYCoordinate() + ")" +
		"(" + NW.getXCoordinate() + ", " + NW.getYCoordinate() + ")" +
		"(" + NE.getXCoordinate() + ", " + NE.getYCoordinate() + ")" );
		
		System.out.println("SW: x = " + SW.getXCoordinate() + ", y = " + SW.getYCoordinate());
		System.out.println("SE: x = " + SE.getXCoordinate() + ", y = " + SE.getYCoordinate());
		System.out.println("NW: x = " + NW.getXCoordinate() + ", y = " + NW.getYCoordinate());
		System.out.println("NE: x = " + NE.getXCoordinate() + ", y = " + NE.getYCoordinate());
	}
	public boolean checkCollision(){	
		if(SW.getXCoordinate() < SE.getXCoordinate(){
			if(NW.getYCoordinate > NE.getYCoordinate()){
				collisionNW.setCoordinates(SW.getXCoordinate(), NW.getYCoordinate());
				collisionNE.setCoordinates(NE.getXCoordinate(), NW.getYCoordinate());
				collisionSW.setCoordinates(SE.getXCoordinate(), SW.getYCoordinate());
				collisionSE.setCoordinates(NE.getXCoordinate(), SW.getYCoordinate());
			}
			//NW Y < NE Y
			else{
				collisionNW.setCoordinates(SE.getXCoordinate(), SW.getYCoordinate());
				collisionNE.setCoordinates(NW.getXCoordinate(), SW.getYCoordinate());
				collisionSW.setCoordinates(SE.getXCoordinate(), NE.getYCoordinate());
				collisionSE.setCoordinates(NW.getXCoordinate(), NE.getYCoordinate());
			}
		}
		else if(SW.getXCoordinate < SE.getXCoordinate()){
			if(NW.getyCoordinate() > NE.getYCoordinate()){
				collisionNW.setCoordinates(SE.getXCoordinate(), SW.getYCoordinate());
				collisionNE.setCoordinates(NW.getXCoordinate(), SW.getYCoordinate());
				collisionSW.setCoordinates(NW.getXCoordinate(), NE.getYCoordinate());
				collisionSE.setCoordinates(SE.getXCoordinate(), NE.getYCoordinate());	
			}
			//NW Y < NE Y
			else{
				collisionNW.setCoordinates(NE.getXCoordinate(), NW.getYCoordinate());
				collisionNE.setCoordinates(SW.getXCoordinate(), NW.getYCoordinate());
				collisionSW.setCoordinates(NE.getXCoordinate(), SE.getYCoordinate());
				collisionSE.setCoordinates(SW.getXCoordinate(), SE.getYCoordinate());	
			}
		}
		//box is at an even angle; independent check based on particular angle
		else{
		
		}
		
		if((testPoint.getXCoordinate() >= collisionNW.getXCoordinate()) && (testPoint.getXCoordinate() <= collisionNE.getXCoordinate())
		&&(testPoint.getYCoordinate() <= collisionNW.getYCoordinate()) && (testPoint.getYCoordinate() >= collisionSW.getYCoordinate())){
			if(
				//Corners of each box compared for collision within the other
				this.pointIsInTriangle();
				this.pointIsInTriangle();
				this.pointIsInTriangle();
				this.pointIsInTriangle();
				
				this.pointIsInTriangle();
				this.pointIsInTriangle();
				this.pointIsInTriangle();
				this.pointIsInTriangle();
			)
			{
				return false;
			}
			else{
				return false;
			}
		}
	}
	
	public boolean pointIsInTriangle(Coordinates startPoint, Coordinates endPoint, boolean startSideBias, boolean upperSideBias){
		//Calc angle multipliers
		int angleMultiplierX;
		int angleMultiplierY;
		if(startPoint.getXCoordinate() > startPoint.getYCoordinate()){
			angleMultiplierX = 1;
			if(startPoint.getYCoordinate() > endPoint.getYCoordinate()){
				angleMultiplierY = 1;
			}
			else{
				angleMultiplierY = -1;
			}
		}
		else{
			angleMultiplierX = -1;
			if(startPoint.getYCoordinate() > endPoint.getYCoordinate()){
				angleMultiplierY = 1;
			}
			else{
				angleMultiplierY = -1;
			}
		}
		
		//Attach angle multipliers to the +1*angleMult for these
		int xOffset = Math.abs((startPoint.getXCoordinate()-endPoint.getXCoordinate())+1*angleMultiplierX);
		int yOffset = Math.abs((startPoint.getYCoordinate()-endPoint.getYCoordinate())+1*angleMultiplierY);
		
		if(xOffset != yOffset){
			int greaterOffset;
			int lesserOffset;
			if(xOffset > yOffset){
				xOffsetGreater = true;
				greaterOffset = xOffset;
				lesserOffset = yOffset;
			}
			if(yOffset > xOffset){
				xOffsetGreater = false;
				greaterOffset = yOffset;
				lesserOffset = xOffset;
			}
			
			int[] changeList;
			//Equal
			if(greaterOffset%lesserOffset == 0){
				int change = greaterOffset/lesserOffset;
				int changeNum = greaterOffset/change;
				
				changeList = new int[changeNum];
				for(int i = 0; i < changeList.length; i++){
					changeList[i] = change;
				}
			}
			//Inequal
			else{
				int greaterChangeNum = greaterOffset/lesserOffset;
				int lesserChange = (greaterOffset-(greaterOffset%leserOffset))/lesserOffset;
				int greaterChange = lesserChange+1;
				int lesserChangeNum = (greaterOffset-(greaterChange*greaterChangeNum))/lesserChange;
				
				changeList = new int[greaterChangeNum+lesserChangeNum];
				
				int startChangeNum;
				int middleChangeNum;
				int endChangeNum;
				if(lesserChangeNum%2 != 0){
					if(startSideBias){
						startChangeNum = (lesserChangeNum+1)/2;
						endChangeNum = (lesserChangeNum-1)/2;
					}
					else{
						startChangeNum = (lesserChangeNum-1)/2;
						endChangeNum = (lesserChangeNum+1)/2;
					}
					for(int i = 0; i > startChange; i++){
						changeList[i] = lesserChange;
					}
					for(int i = startChangeNum+1; i < middleChangeNum; i++){
						changeList[i] = greaterChange;
					}
					for(int i = startChangeNum+middleChangeNum+1; i < endChangeNum; i++){
						changeList[i] = lesserChange;
					}
				}	
				else{
					startChangeNum = lesserChangeNum/2;
					middleChangeNum = greaterChangeNum;
					endChangeNum = startChangeNum;
					
					for(int i = 0, int j = startChangeNum+middleChangeNum+1; i < startChangeNum; i++, j++){
						changeList[i] = lesserChange;
						changeList[j] = lesserChange;
					}
					for(int i = startChangeNum+1; i < middleChangeNum; i++){
						changeList[i] = lesserChange;
					}
				}
				
				Coordinates tertiaryPoint;
				if(upperSideBias){
					tertiaryPoint.setCoordinates();
					if(xOffsetGreater){
						for(int i = 0; i < changeList.length; i++){
							if(
								
							){
							
							}
						}
					}
					else{
						for(int i = 0; i < changeList.length; i++){
							if(
								
							){
							
							}
						}
					}
				}
				else{
				tertiaryPoint.setCoordinates();
					if(xOffsetGreater){
						for(int i = 0; i < changeList.length; i++){
							if(
								
							){
							
							}
						}
					}
					else{
						for(int i = 0; i < changeList.length; i++){
							if(
								
							){
							
							}
						}
					}
				}
			
				return false;
			}
		}
		//They are equal; special handling for dis one
		else{
		
		}
	}


class main{
	public static void main(String args[]){
		Box b = new Box(2,4);
		b.setCurrentAngle(271);
		b.initBox(0,0);
		b.printCoordinates();
	}
}
